/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "taiko_generator"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "taiko_generator"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.2"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  const char *quiet_help; /**< @brief Don't print a message at the end help description.  */
  char * output_dir_arg;	/**< @brief Set output directory (default='./').  */
  char * output_dir_orig;	/**< @brief Set output directory original value given at command line.  */
  const char *output_dir_help; /**< @brief Set output directory help description.  */
  char * artist_arg;	/**< @brief Set the beatmap artist (default='Test').  */
  char * artist_orig;	/**< @brief Set the beatmap artist original value given at command line.  */
  const char *artist_help; /**< @brief Set the beatmap artist help description.  */
  char * pattern_arg;	/**< @brief Set the pattern repeated along the beatmap.  */
  char * pattern_orig;	/**< @brief Set the pattern repeated along the beatmap original value given at command line.  */
  const char *pattern_help; /**< @brief Set the pattern repeated along the beatmap help description.  */
  int nb_ho_arg;	/**< @brief Set the number of hitobject in the beatmap (default='128').  */
  char * nb_ho_orig;	/**< @brief Set the number of hitobject in the beatmap original value given at command line.  */
  const char *nb_ho_help; /**< @brief Set the number of hitobject in the beatmap help description.  */
  double bpm_arg;	/**< @brief Set the bpm for the beatmap (default='160.').  */
  char * bpm_orig;	/**< @brief Set the bpm for the beatmap original value given at command line.  */
  const char *bpm_help; /**< @brief Set the bpm for the beatmap help description.  */
  double abpm_arg;	/**< @brief Set the apparent bpm, by default same as bpm (default='-1.').  */
  char * abpm_orig;	/**< @brief Set the apparent bpm, by default same as bpm original value given at command line.  */
  const char *abpm_help; /**< @brief Set the apparent bpm, by default same as bpm help description.  */
  double od_arg;	/**< @brief Set the overall difficulty (default='5.').  */
  char * od_orig;	/**< @brief Set the overall difficulty original value given at command line.  */
  const char *od_help; /**< @brief Set the overall difficulty help description.  */
  int random_arg;	/**< @brief Add randomness to offset, add or substract up to the value in ms (default='0').  */
  char * random_orig;	/**< @brief Add randomness to offset, add or substract up to the value in ms original value given at command line.  */
  const char *random_help; /**< @brief Add randomness to offset, add or substract up to the value in ms help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int quiet_given ;	/**< @brief Whether quiet was given.  */
  unsigned int output_dir_given ;	/**< @brief Whether output-dir was given.  */
  unsigned int artist_given ;	/**< @brief Whether artist was given.  */
  unsigned int pattern_given ;	/**< @brief Whether pattern was given.  */
  unsigned int nb_ho_given ;	/**< @brief Whether nb-ho was given.  */
  unsigned int bpm_given ;	/**< @brief Whether bpm was given.  */
  unsigned int abpm_given ;	/**< @brief Whether abpm was given.  */
  unsigned int od_given ;	/**< @brief Whether od was given.  */
  unsigned int random_given ;	/**< @brief Whether random was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
